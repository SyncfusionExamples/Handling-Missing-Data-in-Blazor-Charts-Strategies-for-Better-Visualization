@page "/counter"
@rendermode InteractiveServer

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns

<div class="col-lg-8 control-section sb-property-border">
    <label>Select Empty Point Mode: </label>
    <SfDropDownList TValue="string" Placeholder="Drop" Width="20%" TItem="SelectionTypes" DataSource="@EmptyPointModeData">
        <DropDownListEvents TValue="string" TItem="SelectionTypes" ValueChange="ChangeEmptyPointMode"></DropDownListEvents>
        <DropDownListFieldSettings Value="Type"></DropDownListFieldSettings>
    </SfDropDownList>

    <SfAccumulationChart EnableSmartLabels="false" EnableBorderOnMouseMove="false" Title="Annual Product-Wise Profit Analysis" Theme="Theme.Bootstrap4">
        <AccumulationChartEvents OnDataLabelRender="DataLabelRenderEvent"></AccumulationChartEvents>
        <AccumulationChartTooltipSettings Header="" Enable="true" Format="<b>${point.x}</b><br> Profit: <b>$${point.y}K</b>" EnableHighlight="false"></AccumulationChartTooltipSettings>
        <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
        <AccumulationChartSeriesCollection>
            <AccumulationChartSeries DataSource="@PieChartPoints" Radius="80%" Name="Profit" XName="Product" YName="ProfitPercentage" Type="AccumulationType.Pie">
                <AccumulationChartEmptyPointSettings Mode="@Mode"></AccumulationChartEmptyPointSettings>
                <AccumulationDataLabelSettings Visible="true" EnableRotation="true" Position="AccumulationLabelPosition.Inside">
                    <AccumulationChartDataLabelFont Size=@Size FontWeight="600"></AccumulationChartDataLabelFont>
                </AccumulationDataLabelSettings>
            </AccumulationChartSeries>
        </AccumulationChartSeriesCollection>
    </SfAccumulationChart>
</div>

@code {
    private EmptyPointMode Mode { get; set; } = EmptyPointMode.Drop;
    public string Size { get; set; } = "12px";
    public List<PieData> PieChartPoints { get; set; } = new List<PieData>
    {
        new PieData { Product = "Rice", ProfitPercentage = 80},
        new PieData { Product = "Wheat", ProfitPercentage = null},
        new PieData { Product = "Oil", ProfitPercentage = 70},
        new PieData { Product = "Corn", ProfitPercentage = 60},
        new PieData { Product = "Gram", ProfitPercentage = null},
        new PieData { Product = "Milk", ProfitPercentage = 70},
        new PieData { Product = "Peas", ProfitPercentage = 80},
        new PieData { Product = "Fruit", ProfitPercentage = 60},
        new PieData { Product = "Butter", ProfitPercentage = null}
    };
    public List<SelectionTypes> EmptyPointModeData { get; set; } = new List<SelectionTypes>
    {
        new SelectionTypes() { Type = EmptyPointMode.Drop.ToString() },
        new SelectionTypes() { Type = EmptyPointMode.Average.ToString() },
        new SelectionTypes() { Type = EmptyPointMode.Zero.ToString() }
    };
    private void ChangeEmptyPointMode(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, SelectionTypes> args)
    {
        if (args.Value.ToString().Equals(EmptyPointModeData[1].Type))
        {
            Mode = EmptyPointMode.Average;
        }
        else if (args.Value.ToString().Equals(EmptyPointModeData[2].Type))
        {
            Mode = EmptyPointMode.Zero;
        }
        else
        {
            Mode = EmptyPointMode.Drop;
        }
    }
    public void DataLabelRenderEvent(AccumulationTextRenderEventArgs args)
    {
        args.Text = args.Point.X + ": $" + args.Point.Y + "K";
    }
    public class SelectionTypes
    {
        public string Type { get; set; }
    }
    public class PieData
    {
        public string Product { get; set; }
        public double? ProfitPercentage { get; set; }
        public string DataLabelMapping { get; set; }
    }
}
